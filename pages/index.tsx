import Head from "next/head";
import { useEffect } from "react";
import { GetServerSideProps } from "next";
import dbConnect from "../utils/dbConnect";
import Product from "../models/product";
import Category from "../models/category";
import SubCategory from "../models/subCategory";
import Pagination from "../components/Pagination";
import ProductCard from "../components/ProductCard";
import { useDispatch } from "react-redux";
import { allProducts } from "../features/productSlice";
import { allCategories } from "../features/categorySlice";
import { allSubCategories } from "../features/subCategorySlice";
import { Props } from "../types/types";

export default function Home(props: Props) {
  /// Many fixes are to be done!!!***


  const dispatch = useDispatch();
  console.log(props.products);

  useEffect(() => {
    dispatch(allProducts(props.products));
    dispatch(allCategories(props.categories));
    dispatch(allSubCategories(props.subCategories));
  }, [dispatch, props.categories, props.products, props.subCategories]);

  return (
    <>
      <Head>
        <title>E-Commerce- Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <ProductCard />
      <Pagination />
    </>
  );
}

export const getServerSideProps: GetServerSideProps = async (context) => {
  await dbConnect();

  const search = context.query.search;
  const filter = context.query.filter;
  const sort = context.query.sort;
  const category = context.query.category;

  function isNumber(value: unknown): value is number {
    return typeof value === "number" && !isNaN(value);
  }
  const page = isNumber(Number(context.query.page))
    ? Number(context.query.page)
    : 1;
  const limit = isNumber(Number(context.query.limit))
    ? Number(context.query.limit)
    : 5;

  const offset = (page - 1) * limit;

  let query = Product.find();

  if (search) {
    query = query
      .where({
        name: { $regex: `${search}`, $options: "i" },
      })
      .skip(offset)
      .limit(limit);
  }

  if (filter) {
    if (filter === "featured") {
      query = query.where({});
    }

    if (filter === "recent") {
      query = query.sort({ createdAt: -1 });
    }
  }
  if (sort === "low") {
    query = query.sort({ price: 1 });
  }
  if (sort === "high") {
    query = query.sort({ price: -1 });
  }

  
  if (category) {
    query = query
      .where({
        $or: [{ category: filter }, { subCategory: filter }],
      })
      .skip(offset)
      .limit(limit);
  }
  query = query.skip(offset).limit(limit);

  const results = await query.exec();

  const products = JSON.parse(JSON.stringify(results));

  const allCategories = await Category.find();
  const categories = JSON.parse(JSON.stringify(allCategories));

  const allSubCategories = await SubCategory.find();
  const subCategories = JSON.parse(JSON.stringify(allSubCategories));

  return {
    props: {
      products,
      categories,
      subCategories,
    },
  };
};

/*let dataCache: Product[] | null = null;


This is also a way to get fetch data but next js team recommends connecting to db directly

export const getServerSideProps: GetServerSideProps<Props> = async () => {
  if (dataCache) {
    return {
      props: {
        products: dataCache,
      },
    };
  }
  const products = await axios.get<Product[]> ("http:localhost:3000/api/products/products");
  dataCache = products.data;
  return {
    props: {
      products: products.data,
    },
  };
};*/
